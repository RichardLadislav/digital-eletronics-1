

library ieee;
use ieee.std_logic_1164.all;


entity tb_multiplexer is
    
end entity tb_multiplexert;

------------------------------------------------------------
-- Architecture body for testbench
------------------------------------------------------------
architecture testbench of tb_multiplexer is

    -- Local signals
    signal s_a           : std_logic_vector(3 - 1 downto 0);
    signal s_b           : std_logic_vector(3 - 1 downto 0);
    signal s_c           : std_logic_vector(3 - 1 downto 0);
    signal s_d           : std_logic_vector(3 - 1 downto 0);
    signal s_sel : std_logic( 1 downto 0);
    signal s_f  : std_logic(1 downto 0);
    

begin
    -- Connecting testbench signals with comparator_2bit
    -- entity (Unit Under Test)
    uut_comparator_2bit : entity work.multiplexer
        port map(
            a_i           => s_a,
            b_i           => s_b,
            c_i           => s_c,
            b_i           => s_d,
            sel_i => s_sel,
            f_o  => s_f,
            
        );

    --------------------------------------------------------
    -- Data generation process
    --------------------------------------------------------
    p_stimulus : process
    begin
        -- Report a note at the beginning of stimulus process
        report "Stimulus process started" severity note;

        -- First test case ...
        s_b <= "000"; s_a <= "110"; wait for 100 ns;
        -- ... and its expected outputs
        assert ((s_B_greater_A = '0') and
                (s_B_equals_A  = '0') and
                (s_B_less_A    = '1'))
        -- If false, then report an error
        -- If true, then do not report anything
        report "Input combination 0000, 0110 FAILED" severity error;

        report "Stimulus process finished" severity note;
      

        -- WRITE OTHER TEST CASES HERE
  
        report "Stimulus process started" severity note;

      
        s_b <= "010"; s_a <= "011"; wait for 100 ns;
       
        assert ((s_B_greater_A = '0') and
                (s_B_equals_A  = '0') and
                (s_B_less_A    = '1'))
       
        report "Input combination 0010, 0011 FAILED" severity error;
         report "Stimulus process started" severity note;

      
        s_b <= "001"; s_a <= "001"; wait for 100 ns;
       
        assert ((s_B_greater_A = '0') and
                (s_B_equals_A  = '1') and
                (s_B_less_A    = '0'))
       
        report "Input combination 0010, 0010 FAILED" severity error;
        report "Stimulus process finished" severity note;
      
         report "Stimulus process started" severity note;

      
        s_b <= "111"; s_a <= "101"; wait for 100 ns;
       
        assert ((s_B_greater_A = '1') and
                (s_B_equals_A  = '0') and
                (s_B_less_A    = '0'))
       
        report "Input combination 1111, 1001 FAILED" severity error;
        report "Stimulus process finished" severity note;
      
         report "Stimulus process started" severity note;
 
        s_b <= "1011"; s_a <= "0110"; wait for 100 ns;
       
        assert ((s_B_greater_A = '1') and
                (s_B_equals_A  = '0') and
                (s_B_less_A    = '0'))
       
        report "Input combination 1011, 0110 FAILED" severity error;


        -- Report a note at the end of stimulus process
        report "Stimulus process finished" severity note;
        wait; -- Data generation process is suspended forever
    end process p_stimulus;

end architecture testbench;
